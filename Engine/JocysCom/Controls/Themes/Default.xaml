<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:JcControls="clr-namespace:JocysCom.ClassLibrary.Controls"
    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <!--
        DynamicResource vs StaticResource: StaticResource could cause controls to be garbage collected.
        Use DynamicResource, except for some properties like BasedOn or Converter.
    -->

    <!--  Colors  -->
    <SolidColorBrush x:Key="BackgroundWhite" Color="#ffffff" />

    <SolidColorBrush x:Key="BackgroundLight" Color="#f0f0f0" />
    <SolidColorBrush x:Key="BackgroundLightSelected" Color="#e4f4ff" />

    <SolidColorBrush x:Key="BackgroundDark" Color="#dedede" />
    <SolidColorBrush x:Key="BackgroundDarkSelected" Color="#c2e7ff" />

    <SolidColorBrush x:Key="BorderDark" Color="#cccccc" />
    <SolidColorBrush x:Key="BorderDarkSelected" Color="#a4d8fa" />

    <SolidColorBrush x:Key="SolidColorBrush_BFF">#ff000000</SolidColorBrush>

    <!--  HUE Color Degrees - Light (hue: X, saturation: 10, lightness: 100)  -->

    <SolidColorBrush x:Key="SolidColorBrush_000L">#FFE6E6</SolidColorBrush>
    <SolidColorBrush x:Key="SolidColorBrush_030L">#FFF2E6</SolidColorBrush>
    <SolidColorBrush x:Key="SolidColorBrush_060L">#FFFFE6</SolidColorBrush>
    <SolidColorBrush x:Key="SolidColorBrush_090L">#F2FFE6</SolidColorBrush>
    <SolidColorBrush x:Key="SolidColorBrush_120L">#E6FFE6</SolidColorBrush>
    <SolidColorBrush x:Key="SolidColorBrush_150L">#E6FFF2</SolidColorBrush>
    <SolidColorBrush x:Key="SolidColorBrush_180L">#E6FFFF</SolidColorBrush>
    <SolidColorBrush x:Key="SolidColorBrush_210L">#E6F2FF</SolidColorBrush>
    <SolidColorBrush x:Key="SolidColorBrush_240L">#E6E6FF</SolidColorBrush>
    <SolidColorBrush x:Key="SolidColorBrush_270L">#F2E6FF</SolidColorBrush>
    <SolidColorBrush x:Key="SolidColorBrush_300L">#FFE6FF</SolidColorBrush>
    <SolidColorBrush x:Key="SolidColorBrush_330L">#FFE6F2</SolidColorBrush>

    <!--  HUE Color Degrees - Dark (hue: X, saturation: 100, lightness: 42)  -->

    <SolidColorBrush x:Key="SolidColorBrush_000D">#D60000</SolidColorBrush>
    <SolidColorBrush x:Key="SolidColorBrush_030D">#D66700</SolidColorBrush>
    <SolidColorBrush x:Key="SolidColorBrush_060D">#D6D600</SolidColorBrush>
    <SolidColorBrush x:Key="SolidColorBrush_090D">#67D600</SolidColorBrush>
    <SolidColorBrush x:Key="SolidColorBrush_120D">#00D600</SolidColorBrush>
    <SolidColorBrush x:Key="SolidColorBrush_150D">#00D667</SolidColorBrush>
    <SolidColorBrush x:Key="SolidColorBrush_180D">#00D6D6</SolidColorBrush>
    <SolidColorBrush x:Key="SolidColorBrush_210D">#0067D6</SolidColorBrush>
    <SolidColorBrush x:Key="SolidColorBrush_240D">#0000D6</SolidColorBrush>
    <SolidColorBrush x:Key="SolidColorBrush_270D">#6700D6</SolidColorBrush>
    <SolidColorBrush x:Key="SolidColorBrush_300D">#D600D6</SolidColorBrush>
    <SolidColorBrush x:Key="SolidColorBrush_330D">#D60067</SolidColorBrush>

    <!--  Window  -->

    <Style x:Key="Window_Default" TargetType="Window">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <!--<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />-->
    </Style>

    <!--  StatusBar  -->
    <Style x:Key="StatusBar_Default" TargetType="StatusBar">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{StaticResource BackgroundLight}" />
    </Style>

    <!--  UserControl  -->
    <Style x:Key="UserControl_Default" TargetType="UserControl">
        <Setter Property="Background" Value="{StaticResource BackgroundLight}" />
    </Style>

    <!--  Grid  -->
    <Style x:Key="Grid_Default" TargetType="Grid" />

    <!--  GridSplitter  -->
    <Style x:Key="GridSplitterHorizontal" TargetType="GridSplitter">
        <Setter Property="Padding" Value="0,0,0,0" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="ResizeBehavior" Value="PreviousAndNext" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridSplitter}">
                    <!--  The "Transparent" background is necessary for the resize icon to be visible beneath the mouse correctly.  -->
                    <Grid Background="Transparent">
                        <StackPanel Margin="3" VerticalAlignment="Center" Orientation="Vertical">
                            <StackPanel.LayoutTransform>
                                <RotateTransform Angle="0" />
                            </StackPanel.LayoutTransform>
                            <Canvas Width="28" Height="3">
                                <Ellipse
                                    Canvas.Left="0"
                                    Width="3"
                                    Height="3"
                                    Fill="LightGray" />
                                <Ellipse
                                    Canvas.Left="6"
                                    Width="3"
                                    Height="3"
                                    Fill="LightGray" />
                                <Ellipse
                                    Canvas.Left="12"
                                    Width="3"
                                    Height="3"
                                    Fill="LightGray" />
                                <Ellipse
                                    Canvas.Left="18"
                                    Width="3"
                                    Height="3"
                                    Fill="LightGray" />
                                <Ellipse
                                    Canvas.Left="24"
                                    Width="3"
                                    Height="3"
                                    Fill="LightGray" />
                            </Canvas>
                        </StackPanel>
                        <StackPanel Height="1" VerticalAlignment="Top" Background="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
                        <StackPanel Height="1" VerticalAlignment="Bottom" Background="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GridSplitterVertical" TargetType="GridSplitter">
        <Setter Property="Padding" Value="0,0,0,0" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="ResizeBehavior" Value="PreviousAndNext" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridSplitter}">
                    <!--  The "Transparent" background is necessary for the resize icon to be visible beneath the mouse correctly.  -->
                    <Grid Background="Transparent">
                        <StackPanel Margin="3" VerticalAlignment="Center" Orientation="Vertical">
                            <StackPanel.LayoutTransform>
                                <RotateTransform Angle="90" />
                            </StackPanel.LayoutTransform>
                            <Canvas Width="28" Height="3">
                                <Ellipse
                                    Canvas.Left="0"
                                    Width="3"
                                    Height="3"
                                    Fill="LightGray" />
                                <Ellipse
                                    Canvas.Left="6"
                                    Width="3"
                                    Height="3"
                                    Fill="LightGray" />
                                <Ellipse
                                    Canvas.Left="12"
                                    Width="3"
                                    Height="3"
                                    Fill="LightGray" />
                                <Ellipse
                                    Canvas.Left="18"
                                    Width="3"
                                    Height="3"
                                    Fill="LightGray" />
                                <Ellipse
                                    Canvas.Left="24"
                                    Width="3"
                                    Height="3"
                                    Fill="LightGray" />
                            </Canvas>
                        </StackPanel>
                        <StackPanel Width="1" HorizontalAlignment="Left" Background="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
                        <StackPanel Width="1" HorizontalAlignment="Right" Background="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  DockPanel  -->
    <!--

	<Style TargetType="DockPanel">
		<Setter Property="Margin" Value="8" />
	</Style>

	-->

    <!--  Label  -->
    <Style x:Key="Label_Default" TargetType="Label">
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>


    <!--  MenuItem  -->

    <Style x:Key="MenuItem_Default" TargetType="MenuItem">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <!--  StackPanel  -->

    <Style x:Key="Container" TargetType="StackPanel">
        <Setter Property="Margin" Value="0" />
    </Style>

    <!--  ContentControl  -->
    <Style x:Key="ContentControl_Default" TargetType="ContentControl">
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <ControlTemplate.Resources>
                        <Style TargetType="Image">
                            <Setter Property="Width" Value="16" />
                            <Setter Property="Height" Value="16" />
                        </Style>
                        <Style TargetType="Label">
                            <Setter Property="Padding" Value="0" />
                            <Setter Property="Margin" Value="5,0,0,0" />
                            <Setter Property="VerticalAlignment" Value="Center" />
                        </Style>
                    </ControlTemplate.Resources>
                    <!--  Template  -->
                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  BUTTON  -->

    <!--  Button StackPanel  -->
    <Style x:Key="ButtonStackPanel" TargetType="StackPanel">
        <Setter Property="Orientation" Value="Horizontal" />
        <Setter Property="IsHitTestVisible" Value="False" />
    </Style>

    <!--  Label  -->
    <Style x:Key="ButtonLabel" TargetType="Label">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
    </Style>

    <!--  Button  -->
    <Style x:Key="Button_Default" TargetType="Button">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="MinWidth" Value="26" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="Background" Value="{StaticResource BackgroundDark}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <ControlTemplate.Resources>
                        <Style TargetType="StackPanel">
                            <Setter Property="Orientation" Value="Horizontal" />
                            <Setter Property="HorizontalAlignment" Value="Center" />
                        </Style>
                        <Style TargetType="Image">
                            <Setter Property="Width" Value="16" />
                            <Setter Property="Height" Value="16" />
                        </Style>
                        <Style TargetType="Label">
                            <Setter Property="Padding" Value="0" />
                            <Setter Property="Margin" Value="5,0,0,0" />
                            <Setter Property="VerticalAlignment" Value="Center" />
                        </Style>
                    </ControlTemplate.Resources>
                    <!--  Template  -->
                    <Border
                        Name="ButtonBorder"
                        Margin="{TemplateBinding Margin}"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        CornerRadius="5">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <!--  Triggers  -->
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ButtonBorder" Property="Background" Value="{StaticResource BackgroundDarkSelected}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style x:Key="Button_Default" TargetType="Button">
        <Setter Property="Height" Value="Auto" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="MinWidth" Value="75" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Resources>
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="5" />
            </Style>
        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Red" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>-->

    <!--  Button -ToolBar  -->

    <Style x:Key="ToolBarButton" TargetType="Button">
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Style.Resources>
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="5" />
                <Setter Property="Background" Value="Green" />
            </Style>
        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Red" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!--  TabItem  -->
    <Style x:Key="TabItem_Default" TargetType="TabItem" />

    <!--  TabControl  -->
    <!--  This style is making control to fail garbage collection (leak memory)  -->
    <Style x:Key="TabControl_Default" TargetType="TabControl">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabControl">
                    <Grid KeyboardNavigation.TabNavigation="Local">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="HeaderPanel" Panel.ZIndex="1" IsItemsHost="True" />
                        <Border
                            x:Name="TabControlBorder"
                            Grid.Row="1"
                            BorderBrush="{StaticResource BorderDark}"
                            BorderThickness="1"
                            CornerRadius="0,5,5,5"
                            KeyboardNavigation.DirectionalNavigation="Contained"
                            KeyboardNavigation.TabIndex="2"
                            KeyboardNavigation.TabNavigation="Local">
                            <!--<Border.OpacityMask>
                                <VisualBrush>
                                    <VisualBrush.Visual>
                                        <Border
                                            SnapsToDevicePixels="True"
                                            Width="{Binding ActualWidth, ElementName=TabControlBorder}"
                                            Height="{Binding ActualHeight, ElementName=TabControlBorder}"
                                            Background="White"
                                            CornerRadius="0,5,5,5" />
                                    </VisualBrush.Visual>
                                </VisualBrush>
                            </Border.OpacityMask>-->
                            <ContentPresenter ContentSource="SelectedContent" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <JcControls:TabIndexConverter x:Key="_TabIndexConverter" />
            <Style TargetType="TabItem">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="TabItem">
                            <ControlTemplate.Resources>
                                <Style TargetType="Label">
                                    <Setter Property="Padding" Value="0" />
                                    <Setter Property="Margin" Value="3,0,0,0" />
                                    <Setter Property="VerticalAlignment" Value="Center" />
                                </Style>
                            </ControlTemplate.Resources>
                            <Grid Margin="0,0,3,-1">
                                <Border
                                    Name="TiBorder"
                                    Margin="0,0,0,1"
                                    Padding="5,4,5,5"
                                    Background="{StaticResource BackgroundDark}"
                                    BorderBrush="{StaticResource BackgroundDark}"
                                    BorderThickness="1,1,1,0"
                                    CornerRadius="5,5,0,0">
                                    <ContentPresenter
                                        Name="TiContent"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        ContentSource="Header" />
                                </Border>
                                <Border
                                    Name="BoBorder"
                                    Margin="1,0,1,0"
                                    BorderBrush="{StaticResource BorderDark}"
                                    BorderThickness="0,0,0,1" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter TargetName="TiBorder" Property="Background" Value="{StaticResource BackgroundWhite}" />
                                    <Setter TargetName="TiBorder" Property="BorderBrush" Value="{StaticResource BorderDark}" />
                                    <Setter TargetName="BoBorder" Property="BorderBrush" Value="{StaticResource BackgroundWhite}" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="IsSelected" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <MultiTrigger.Setters>
                                        <Setter TargetName="TiBorder" Property="BorderBrush" Value="{StaticResource BackgroundDarkSelected}" />
                                        <Setter TargetName="TiBorder" Property="Background" Value="{StaticResource BackgroundDarkSelected}" />
                                    </MultiTrigger.Setters>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
    </Style>

    <!--  PasswordBox  -->

    <Style x:Key="PasswordBox_Default" TargetType="PasswordBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="PasswordBox">
                    <Border
                        x:Name="PasswordBoxBorder"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5"
                        SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderBrush" Value="#22000000" />
        <Setter Property="BorderThickness" Value="1" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Background" Value="#11000000" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="#7eb4ea" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!--  TextBox  -->

    <Style x:Key="TextBox_Default" TargetType="TextBox">
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderBrush" Value="#22000000" />
        <Setter Property="BorderThickness" Value="1" />
        <!--<Setter Property="MinWidth" Value="120" />-->
        <Style.Resources>
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="5" />
            </Style>
        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="Padding" Value="5" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Background" Value="#11000000" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  TextBox - ResultsLog  -->

    <Style x:Key="TextBoxResultsLog" BasedOn="{StaticResource TextBox_Default}" TargetType="TextBox">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="AcceptsReturn" Value="True" />
        <!--<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />-->
        <Setter Property="FontFamily" Value="Consolas" />
        <Setter Property="MinLines" Value="5" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="MinLines" Value="5" />
    </Style>

    <!--  TextBox - Cell  -->

    <Style x:Key="TextBoxCell" BasedOn="{StaticResource TextBox_Default}" TargetType="TextBox">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Padding" Value="1,4,1,2" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style x:Key="TextBoxRightCell" BasedOn="{StaticResource TextBoxCell}" TargetType="TextBox">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="TextAlignment" Value="Right" />
    </Style>

    <Style x:Key="TextBoxCenterCell" BasedOn="{StaticResource TextBoxCell}" TargetType="TextBox">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="TextAlignment" Value="Center" />
    </Style>

    <!--  TextBlock  -->

    <Style x:Key="TextBlock_Default" TargetType="TextBlock">
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Margin" Value="3,3,3,3" />
        <Setter Property="Padding" Value="3,3,3,3" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <!--  TextBlock - Cell  -->

    <Style x:Key="TextBlockCell" BasedOn="{StaticResource TextBlock_Default}" TargetType="TextBlock">
        <Setter Property="Padding" Value="3,4,3,2" />
        <Setter Property="Margin" Value="0,0,0,0" />
    </Style>

    <Style x:Key="TextBlockLeftCell" BasedOn="{StaticResource TextBlockCell}" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="TextAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style x:Key="TextBlockRightCell" BasedOn="{StaticResource TextBlockCell}" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style x:Key="TextBlockCenterCell" BasedOn="{StaticResource TextBlockCell}" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>


    <!--  DataGrid  -->

    <Style x:Key="DataGrid_Default" TargetType="DataGrid">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CanUserAddRows" Value="False" />
        <Setter Property="CanUserDeleteRows" Value="False" />
        <Setter Property="GridLinesVisibility" Value="Horizontal" />
        <Setter Property="HeadersVisibility" Value="Column" />
        <Setter Property="HorizontalGridLinesBrush" Value="{StaticResource BackgroundDark}" />
        <Setter Property="VerticalGridLinesBrush" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
        <Style.Resources>
            <!--  Make selected row color of inactive grid as same as active grid.  -->
            <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="{x:Static SystemColors.HighlightColor}" />
            <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="{x:Static SystemColors.HighlightTextColor}" />
            <!--  Other styles  -->
            <Style TargetType="DataGridColumnHeader">
                <Setter Property="Padding" Value="3,3,3,3" />
                <!--<Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />-->
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="1,0" EndPoint="1,1">
                            <GradientStop Offset="0" Color="{DynamicResource {x:Static SystemColors.WindowColorKey}}" />
                            <GradientStop Offset="1" Color="{DynamicResource {x:Static SystemColors.ControlColorKey}}" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderThickness" Value="1,0,0,0" />
                <Style.Triggers>
                    <!--  Apply style to first column only  -->
                    <Trigger Property="DisplayIndex" Value="0">
                        <Setter Property="BorderThickness" Value="0,0,0,0" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="DataGridCell">
                <Setter Property="Padding" Value="3,3,3,3" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                <Setter Property="BorderThickness" Value="1,0,0,0" />
                <Style.Triggers>
                    <!--  Apply style to first column only  -->
                    <DataTrigger Binding="{Binding Column.DisplayIndex, RelativeSource={RelativeSource Self}}" Value="0">
                        <Setter Property="BorderThickness" Value="0,0,0,0" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="DataGridReadOnly" BasedOn="{StaticResource DataGrid_Default}" TargetType="DataGrid">
        <!--<Setter Property="RowBackground" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />-->
        <Setter Property="IsReadOnly" Value="true" />
        <Setter Property="BorderThickness" Value="1,0,0,0" />
        <Setter Property="GridLinesVisibility" Value="All" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
        <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
        <Setter Property="VerticalGridLinesBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
    </Style>

    <!--  Cell HUE Degree Pastel Colours  -->

    <Style x:Key="DataGridCell_D000" TargetType="DataGridCell">
        <Style.Triggers>
            <Trigger Property="DataGridCell.IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource SolidColorBrush_000L}" />
                <Setter Property="Background" Value="{DynamicResource SolidColorBrush_000D}" />
                <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush_000D}" />
            </Trigger>
            <Trigger Property="DataGridCell.IsSelected" Value="False">
                <Setter Property="Background" Value="{DynamicResource SolidColorBrush_000L}" />
                <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush_000L}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DataGridCell_D030" TargetType="DataGridCell">
        <Style.Triggers>
            <Trigger Property="DataGridCell.IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource SolidColorBrush_030L}" />
                <Setter Property="Background" Value="{DynamicResource SolidColorBrush_030D}" />
                <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush_030D}" />
            </Trigger>
            <Trigger Property="DataGridCell.IsSelected" Value="False">
                <Setter Property="Background" Value="{DynamicResource SolidColorBrush_030L}" />
                <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush_030L}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DataGridCell_D060" TargetType="DataGridCell">
        <Style.Triggers>
            <Trigger Property="DataGridCell.IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource SolidColorBrush_060L}" />
                <Setter Property="Background" Value="{DynamicResource SolidColorBrush_060D}" />
                <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush_060D}" />
            </Trigger>
            <Trigger Property="DataGridCell.IsSelected" Value="False">
                <Setter Property="Background" Value="{DynamicResource SolidColorBrush_060L}" />
                <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush_060L}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DataGridCell_D090" TargetType="DataGridCell">
        <Style.Triggers>
            <Trigger Property="DataGridCell.IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource SolidColorBrush_090L}" />
                <Setter Property="Background" Value="{DynamicResource SolidColorBrush_090D}" />
                <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush_090D}" />
            </Trigger>
            <Trigger Property="DataGridCell.IsSelected" Value="False">
                <Setter Property="Background" Value="{DynamicResource SolidColorBrush_090L}" />
                <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush_090L}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DataGridCell_D120" TargetType="DataGridCell">
        <Style.Triggers>
            <Trigger Property="DataGridCell.IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource SolidColorBrush_120L}" />
                <Setter Property="Background" Value="{DynamicResource SolidColorBrush_120D}" />
                <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush_120D}" />
            </Trigger>
            <Trigger Property="DataGridCell.IsSelected" Value="False">
                <Setter Property="Background" Value="{DynamicResource SolidColorBrush_120L}" />
                <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush_120L}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DataGridCell_D150" TargetType="DataGridCell">
        <Style.Triggers>
            <Trigger Property="DataGridCell.IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource SolidColorBrush_150L}" />
                <Setter Property="Background" Value="{DynamicResource SolidColorBrush_150D}" />
                <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush_150D}" />
            </Trigger>
            <Trigger Property="DataGridCell.IsSelected" Value="False">
                <Setter Property="Background" Value="{DynamicResource SolidColorBrush_150L}" />
                <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush_150L}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DataGridCell_D180" TargetType="DataGridCell">
        <Style.Triggers>
            <Trigger Property="DataGridCell.IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource SolidColorBrush_180L}" />
                <Setter Property="Background" Value="{DynamicResource SolidColorBrush_180D}" />
                <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush_180D}" />
            </Trigger>
            <Trigger Property="DataGridCell.IsSelected" Value="False">
                <Setter Property="Background" Value="{DynamicResource SolidColorBrush_180L}" />
                <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush_180L}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DataGridCell_D210" TargetType="DataGridCell">
        <Style.Triggers>
            <Trigger Property="DataGridCell.IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource SolidColorBrush_210L}" />
                <Setter Property="Background" Value="{DynamicResource SolidColorBrush_210D}" />
                <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush_210D}" />
            </Trigger>
            <Trigger Property="DataGridCell.IsSelected" Value="False">
                <Setter Property="Background" Value="{DynamicResource SolidColorBrush_210L}" />
                <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush_210L}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="DataGridCell_D240" TargetType="DataGridCell">
        <Style.Triggers>
            <Trigger Property="DataGridCell.IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource SolidColorBrush_240L}" />
                <Setter Property="Background" Value="{DynamicResource SolidColorBrush_240D}" />
                <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush_240D}" />
            </Trigger>
            <Trigger Property="DataGridCell.IsSelected" Value="False">
                <Setter Property="Background" Value="{DynamicResource SolidColorBrush_240L}" />
                <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush_240L}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="DataGridCell_D270" TargetType="DataGridCell">
        <Style.Triggers>
            <Trigger Property="DataGridCell.IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource SolidColorBrush_270L}" />
                <Setter Property="Background" Value="{DynamicResource SolidColorBrush_270D}" />
                <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush_270D}" />
            </Trigger>
            <Trigger Property="DataGridCell.IsSelected" Value="False">
                <Setter Property="Background" Value="{DynamicResource SolidColorBrush_270L}" />
                <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush_270L}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DataGridCell_D300" TargetType="DataGridCell">
        <Style.Triggers>
            <Trigger Property="DataGridCell.IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource SolidColorBrush_300L}" />
                <Setter Property="Background" Value="{DynamicResource SolidColorBrush_300D}" />
                <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush_300D}" />
            </Trigger>
            <Trigger Property="DataGridCell.IsSelected" Value="False">
                <Setter Property="Background" Value="{DynamicResource SolidColorBrush_300L}" />
                <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush_300L}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DataGridCell_D330" TargetType="DataGridCell">
        <Style.Triggers>
            <Trigger Property="DataGridCell.IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource SolidColorBrush_330L}" />
                <Setter Property="Background" Value="{DynamicResource SolidColorBrush_330D}" />
                <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush_330D}" />
            </Trigger>
            <Trigger Property="DataGridCell.IsSelected" Value="False">
                <Setter Property="Background" Value="{DynamicResource SolidColorBrush_330L}" />
                <Setter Property="BorderBrush" Value="{DynamicResource SolidColorBrush_330L}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  DataGridTextColumn  -->
    <!--

	<Style BasedOn="{StaticResource DataGridTextColumnDefault}" TargetType="DataGridTextColumn" />

	-->
    <!--  ComboBox  -->

    <!--<Style x:Key="ComboBox_Default" TargetType="ComboBox">
        <Setter Property="Margin" Value="3,3,3,3" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>-->

    <!--  ComboBox - Grid  -->

    <!--<Style x:Key="ComboBoxGrid" BasedOn="{StaticResource ComboBox_Default}" TargetType="ComboBox">
        <Setter Property="Padding" Value="3,3,3,3" />
        <Setter Property="Margin" Value="3,3,3,3" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>-->


    <!--  CheckBox  -->

    <!--<Style x:Key="CheckBox_Default" TargetType="CheckBox">
		<Setter Property="Margin" Value="3" />
		<Setter Property="Padding" Value="5" />
		<Setter Property="Height" Value="Auto" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
	</Style>-->


    <!--  CheckBox FocusVisualStyle  -->
    <Style x:Key="FocusVisual_Checkbox">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        RadiusX="5"
                        RadiusY="5"
                        Stroke="#11000000"
                        StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  CheckBox Template  -->
    <ControlTemplate x:Key="CheckBox_Template" TargetType="CheckBox">
        <StackPanel Margin="3" Orientation="Horizontal">
            <Border
                x:Name="checkBoxBorder"
                Padding="1"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Background="White"
                BorderBrush="#22000000"
                BorderThickness="1"
                CornerRadius="3">
                <Grid x:Name="markGrid">
                    <Path
                        x:Name="optionMark"
                        Margin="2"
                        Data="F1M9.97498,1.22334L4.6983,9.09834 4.52164,9.09834 0,5.19331 1.27664,3.52165 4.255,6.08833 8.33331,1.52588E-05 9.97498,1.22334z"
                        Fill="Black"
                        Opacity="0"
                        Stretch="None" />
                    <Rectangle
                        x:Name="indeterminateMark"
                        Margin="2"
                        Fill="Black"
                        Opacity="0" />
                </Grid>
            </Border>
            <ContentPresenter
                x:Name="contentPresenter"
                Margin="3,0,3,0"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="Center"
                Content="{TemplateBinding Content}"
                ContentStringFormat="{TemplateBinding ContentStringFormat}"
                ContentTemplate="{TemplateBinding ContentTemplate}"
                Focusable="False"
                RecognizesAccessKey="True"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </StackPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="checkBoxBorder" Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="optionMark" Property="Opacity" Value="1" />
                <Setter TargetName="indeterminateMark" Property="Opacity" Value="0" />
            </Trigger>
            <Trigger Property="IsChecked" Value="{x:Null}">
                <Setter TargetName="optionMark" Property="Opacity" Value="0" />
                <Setter TargetName="indeterminateMark" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="#11000000" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="checkBoxBorder" Property="Background" Value="#f3f9ff" />
                <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="#7eb4ea" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  CheckBox  -->
    <Style x:Key="CheckBox_Default" TargetType="CheckBox">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual_Checkbox}" />
        <Setter Property="Template" Value="{DynamicResource CheckBox_Template}" />
    </Style>

    <!--  CheckBox - Cell  -->

    <Style x:Key="CheckBoxCell" BasedOn="{StaticResource CheckBox_Default}" TargetType="CheckBox">
        <Setter Property="Margin" Value="3,0,3,0" />
        <Setter Property="Padding" Value="0,0,0,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>

    <Style x:Key="LabelGrid" TargetType="Label">
        <Setter Property="Padding" Value="4,2,4,2" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <!--  ToolBarPanel  -->
    <Style x:Key="MainToolBarPanel" TargetType="ToolBarPanel">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Margin" Value="0,0,0,0" />
    </Style>

    <!--  ToolBar  -->
    <Style x:Key="MainToolBar" TargetType="ToolBar">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Margin" Value="-1,0,-12,-1" />
        <!--  Hide right expand mini button  -->
        <Setter Property="Padding" Value="0,0,0,0" />
        <Setter Property="ToolBar.OverflowMode" Value="AsNeeded" />
        <Setter Property="ToolBarTray.IsLocked" Value="True" />
        <Style.Resources>
            <Style x:Key="ToolBarMainPanelBorderStyle" TargetType="{x:Type Border}">
                <Setter Property="CornerRadius" Value="0,0,0,0" />
            </Style>
        </Style.Resources>
    </Style>

    <!--  Separator  -->

    <Style x:Key="MainSeparator" TargetType="Separator">
        <Setter Property="Margin" Value="1,3,1,3" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Separator">
                    <Border
                        VerticalAlignment="Stretch"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="true" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  GroupBox  -->

    <Style x:Key="GroupBox_Default" TargetType="GroupBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <Grid>
                        <Border
                            Margin="1,14,0,0"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            BorderBrush="White"
                            BorderThickness="1"
                            CornerRadius="5" />
                        <Border
                            Margin="0,13,1,1"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            BorderBrush="{StaticResource BorderDark}"
                            BorderThickness="1"
                            CornerRadius="5" />
                        <StackPanel>
                            <Border
                                Margin="10,0,10,0"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Top"
                                Background="{StaticResource BackgroundLight}">
                                <ContentPresenter Margin="5" ContentSource="Header" />
                            </Border>
                            <ContentPresenter Margin="5,0,5,5" ContentSource="Content" />
                        </StackPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
		Using default style in .NET 4.8 prevents GroupBox control from disposing.
		Use modified style extracted from:
		c:\Program Files\Microsoft Visual Studio\2022\Community\DesignTools\SystemThemes\Wpf\aero2.normalcolor.xaml
		Removed static resource link to "<BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>" from style which caused memory leak.
	-->

    <!--<Style x:Key="GroupBox_Default" TargetType="GroupBox">
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Margin" Value="3,3,3,3" />
		<Setter Property="HeaderTemplate">
			<Setter.Value>
				<DataTemplate>
					<TextBlock Style="{DynamicResource TextBlock_Default}" Text="{Binding Content}" />
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type GroupBox}">
					<Grid SnapsToDevicePixels="true">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="6" />
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="6" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="Auto" />
							<RowDefinition Height="*" />
							<RowDefinition Height="6" />
						</Grid.RowDefinitions>
						<Border
							Grid.Row="1"
							Grid.RowSpan="3"
							Grid.Column="0"
							Grid.ColumnSpan="4"
							Background="{TemplateBinding Background}"
							BorderBrush="Transparent"
							BorderThickness="1"
							CornerRadius="4" />

						<Border
							Grid.Row="1"
							Grid.RowSpan="3"
							Grid.ColumnSpan="4"
							BorderBrush="White"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="4"
							OpacityMask="{x:Null}">
							<Border BorderBrush="Transparent" BorderThickness="1" CornerRadius="3">
								<Border BorderBrush="White" BorderThickness="0.5" CornerRadius="2" />
							</Border>
						</Border>

						<Border
							x:Name="Header"
							Grid.Row="0"
							Grid.RowSpan="2"
							Grid.Column="1"
							Padding="3,1,3,0">
							<ContentPresenter ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Border>

						<ContentPresenter
							Grid.Row="2"
							Grid.Column="1"
							Grid.ColumnSpan="2"
							Margin="{TemplateBinding Padding}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>-->

    <!--  ComboBoxTogleButton (SelectedItem) and (Arrow)  -->
    <Style x:Key="ComboBoxToggleButton" TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Name="Border" Background="{StaticResource BackgroundDark}" CornerRadius="5">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="25" />
                            </Grid.ColumnDefinitions>
                            <Path
                                Name="Arrow"
                                Grid.Column="1"
                                Width="10"
                                Height="5"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Data="M 0,0 L 10,0 L 5,5 Z"
                                Fill="Black"
                                RenderTransformOrigin="0.5,0.5" />
                        </Grid>
                    </Border>
                    <!--  Triggers  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource BackgroundDarkSelected}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ComboBoxItem  -->
    <Style TargetType="ComboBoxItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Border
                        Name="ComboBoxItemBorder"
                        Padding="10,5,25,5"
                        CornerRadius="5"
                        SnapsToDevicePixels="True">
                        <ContentPresenter />
                    </Border>
                    <!--  Triggers  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ComboBoxItemBorder" Property="Background" Value="{StaticResource BackgroundDarkSelected}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ComboBoxTextBox  -->
    <!--
		<ControlTemplate x:Key="ComboBoxTextBox" TargetType="TextBox">
			<Border x:Name="PART_ContentHost" />
		</ControlTemplate>-->

    <!--  ComboBox **********************************************************************  -->
    <Style x:Key="ComboBox_Default" TargetType="ComboBox">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <!--  Toggle Button settings  -->
                        <ToggleButton
                            Name="ToggleButton"
                            ClickMode="Press"
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Style="{StaticResource ComboBoxToggleButton}" />
                        <!--  Selected item settings  -->
                        <ContentPresenter
                            Name="ContentSite"
                            Margin="10,5,25,5"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            IsHitTestVisible="False" />
                        <!--  DropDown popup settings  -->
                        <Popup Name="Popup" AllowsTransparency="True" IsOpen="{TemplateBinding IsDropDownOpen}">
                            <Grid MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border Background="{StaticResource BackgroundDark}" CornerRadius="5" />
                                <ScrollViewer Margin="0">
                                    <VirtualizingStackPanel IsItemsHost="True" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <!--  Triggers  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ComboBox Default  -->

    <!--<Style TargetType="ListView">
        <Setter Property="Background" Value="{StaticResource Color.Black.4}"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Padding" Value="5"/>
        <Style.Resources>
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="5"/>
            </Style>
            <Style TargetType="TextBlock">
                <Setter Property="FontFamily" Value="Roboto Mono"/>
                <Setter Property="FontSize" Value="11"/>
            </Style>

            <Style TargetType="ListViewItem">
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Padding" Value="0"/>
                <Setter Property="Background" Value="Transparent"/>
            </Style>
        </Style.Resources>
    </Style>-->


    <!--  DataGridCell Triggers  -->
    <Style x:Key="DataGridCellStyle" TargetType="DataGridCell">
        <Setter Property="Padding" Value="4" />
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Background}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- XAML Page.
	<DataGrid.CellStyle>
		<Style TargetType="DataGridCell" BasedOn="{StaticResource DataGridCellStyle}" />
	</DataGrid.CellStyle>
	-->

    <!--  Default Styles  -->

    <Style BasedOn="{StaticResource Window_Default}" TargetType="Window" />
    <Style BasedOn="{StaticResource UserControl_Default}" TargetType="UserControl" />
    <Style BasedOn="{StaticResource Grid_Default}" TargetType="Grid" />
    <Style BasedOn="{StaticResource GroupBox_Default}" TargetType="GroupBox" />
    <Style BasedOn="{StaticResource DataGrid_Default}" TargetType="DataGrid" />
    <Style BasedOn="{StaticResource PasswordBox_Default}" TargetType="PasswordBox" />
    <Style BasedOn="{StaticResource TextBox_Default}" TargetType="TextBox" />
    <Style BasedOn="{StaticResource ComboBox_Default}" TargetType="ComboBox" />
    <Style BasedOn="{StaticResource Button_Default}" TargetType="Button" />
    <Style BasedOn="{StaticResource CheckBox_Default}" TargetType="CheckBox" />
    <Style BasedOn="{StaticResource MenuItem_Default}" TargetType="MenuItem" />
    <Style BasedOn="{StaticResource Label_Default}" TargetType="Label" />
    <Style BasedOn="{StaticResource ContentControl_Default}" TargetType="ContentControl" />
    <!--<Style BasedOn="{StaticResource DataGridCellStyle}" TargetType="DataGridCell" />-->

    <!--  TabControl_Default style is making control to fail garbage collection (leak memory)  -->
    <Style BasedOn="{StaticResource TabItem_Default}" TargetType="TabItem" />
    <Style BasedOn="{StaticResource TabControl_Default}" TargetType="TabControl" />
    <Style BasedOn="{StaticResource StatusBar_Default}" TargetType="StatusBar" />


</ResourceDictionary>
