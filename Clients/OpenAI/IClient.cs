using JocysCom.VS.AiCompanion.Clients.OpenAI.Models;

public interface IClient
{
    //create_chat_completion_response createChatCompletion(create_chat_completion_request body);
    //create_completion_response createCompletion(create_completion_request body);
    create_edit_response createEdit(create_edit_request body);
    images_response createImage(create_image_request body);
    images_response createImageEdit(create_image_edit_request body);
    images_response createImageVariation(create_image_variation_request body);
    create_embedding_response createEmbedding(create_embedding_request body);
    string createSpeech(create_speech_request body);
    //create_transcription_response createTranscription(create_transcription_request body);
    create_translation_response createTranslation(create_translation_request body);
    //list_files_response listFiles(string purpose);
    open_a_i_file createFile(create_file_request body);
    //delete_file_response deleteFile(string file_id);
    open_a_i_file retrieveFile(string file_id);
    string downloadFile(string file_id);
    fine_tuning_job createFineTuningJob(create_fine_tuning_job_request body);
    list_paginated_fine_tuning_jobs_response listPaginatedFineTuningJobs(string after, int limit);
    fine_tuning_job retrieveFineTuningJob(string fine_tuning_job_id);
    //list_fine_tuning_job_events_response listFineTuningEvents(string fine_tuning_job_id, string after, int limit);
    fine_tuning_job cancelFineTuningJob(string fine_tuning_job_id);
    fine_tune createFineTune(create_fine_tune_request body);
    //list_fine_tunes_response listFineTunes();
    fine_tune retrieveFineTune(string fine_tune_id);
    fine_tune cancelFineTune(string fine_tune_id);
    list_fine_tune_events_response listFineTuneEvents(string fine_tune_id, bool stream);
    //list_models_response listModels();
    model retrieveModel(string model);
    //delete_model_response deleteModel(string model);
    create_moderation_response createModeration(create_moderation_request body);
    //list_assistants_response listAssistants(int limit, string order, string after, string before);
    //assistant_object createAssistant(create_assistant_request body);
    assistant_object getAssistant(string assistant_id);
    assistant_object modifyAssistant(string assistant_id, modify_assistant_request body);
    //delete_assistant_response deleteAssistant(string assistant_id);
    thread_object createThread(create_thread_request body);
    thread_object getThread(string thread_id);
    //thread_object modifyThread(string thread_id, modify_thread_request body);
    //delete_thread_response deleteThread(string thread_id);
    //list_messages_response listMessages(string thread_id, int limit, string order, string after, string before);
    message_object createMessage(string thread_id, create_message_request body);
    message_object getMessage(string thread_id, string message_id);
    message_object modifyMessage(string thread_id, string message_id, modify_message_request body);
    run_object createThreadAndRun(create_thread_and_run_request body);
    list_runs_response listRuns(string thread_id, int limit, string order, string after, string before);
    run_object createRun(string thread_id, create_run_request body);
    run_object getRun(string thread_id, string run_id);
    //run_object modifyRun(string thread_id, string run_id, modify_run_request body);
    run_object submitToolOuputsToRun(string thread_id, string run_id, submit_tool_outputs_run_request body);
    run_object cancelRun(string thread_id, string run_id);
    //list_run_steps_response listRunSteps(string thread_id, string run_id, int limit, string order, string after, string before);
    run_step_object getRunStep(string thread_id, string run_id, string step_id);
    //list_assistant_files_response listAssistantFiles(string assistant_id, int limit, string order, string after, string before);
    assistant_file_object createAssistantFile(string assistant_id, create_assistant_file_request body);
    assistant_file_object getAssistantFile(string assistant_id, string file_id);
    delete_assistant_file_response deleteAssistantFile(string assistant_id, string file_id);
    //list_message_files_response listMessageFiles(string thread_id, string message_id, int limit, string order, string after, string before);
    message_file_object getMessageFile(string thread_id, string message_id, string file_id);
}
